<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DatabaseType1" xml:space="preserve">
    <value>MS Access</value>
  </data>
  <data name="DatabaseType2" xml:space="preserve">
    <value>MS Sqlserver</value>
  </data>
  <data name="DatabaseType3" xml:space="preserve">
    <value>MySql</value>
  </data>
  <data name="ExportLimit1" xml:space="preserve">
    <value>不做输出控制</value>
  </data>
  <data name="ExportLimit2" xml:space="preserve">
    <value>输出时去掉网页符号</value>
  </data>
  <data name="ExportLimit3" xml:space="preserve">
    <value>输出时附加前缀</value>
  </data>
  <data name="ExportLimit4" xml:space="preserve">
    <value>输出时附加后缀</value>
  </data>
  <data name="ExportLimit5" xml:space="preserve">
    <value>左起去掉字符</value>
  </data>
  <data name="ExportLimit6" xml:space="preserve">
    <value>右起去掉字符</value>
  </data>
  <data name="ExportLimit7" xml:space="preserve">
    <value>替换其中符合条件的字符</value>
  </data>
  <data name="ExportLimit8" xml:space="preserve">
    <value>去掉字符串首尾空格</value>
  </data>
  <data name="ExportLimit9" xml:space="preserve">
    <value>输出时采用正则表达式进行替换</value>
  </data>
  <data name="GDataType1" xml:space="preserve">
    <value>文件</value>
  </data>
  <data name="GDataType2" xml:space="preserve">
    <value>Flash</value>
  </data>
  <data name="GDataType3" xml:space="preserve">
    <value>图片</value>
  </data>
  <data name="GDataType4" xml:space="preserve">
    <value>文本</value>
  </data>
  <data name="LimitSign1" xml:space="preserve">
    <value>不做任意格式的限制</value>
  </data>
  <data name="LimitSign2" xml:space="preserve">
    <value>匹配时去掉网页符号</value>
  </data>
  <data name="LimitSign3" xml:space="preserve">
    <value>只匹配中文</value>
  </data>
  <data name="LimitSign4" xml:space="preserve">
    <value>只匹配双字节字符</value>
  </data>
  <data name="LimitSign5" xml:space="preserve">
    <value>只匹配数字</value>
  </data>
  <data name="LimitSign6" xml:space="preserve">
    <value>只匹配字母数字及常用字符</value>
  </data>
  <data name="LimitSign7" xml:space="preserve">
    <value>自定义正则匹配表达式</value>
  </data>
  <data name="PlanDisabledType1" xml:space="preserve">
    <value>超过指定运行次数计划失效</value>
  </data>
  <data name="PlanDisabledType2" xml:space="preserve">
    <value>超过指定时间计划失效</value>
  </data>
  <data name="PlanState1" xml:space="preserve">
    <value>有效</value>
  </data>
  <data name="PlanState2" xml:space="preserve">
    <value>失效</value>
  </data>
  <data name="PlanState3" xml:space="preserve">
    <value>过期</value>
  </data>
  <data name="PublishType1" xml:space="preserve">
    <value>不发布数据</value>
  </data>
  <data name="PublishType2" xml:space="preserve">
    <value>发布到Access数据库</value>
  </data>
  <data name="PublishType3" xml:space="preserve">
    <value>发布到MS Sql Server</value>
  </data>
  <data name="PublishType4" xml:space="preserve">
    <value>发布到Excel文件</value>
  </data>
  <data name="PublishType5" xml:space="preserve">
    <value>发布到文本文件</value>
  </data>
  <data name="PublishType6" xml:space="preserve">
    <value>发布到MySql数据库</value>
  </data>
  <data name="PublishType7" xml:space="preserve">
    <value>在线发布</value>
  </data>
  <data name="RunTaskType1" xml:space="preserve">
    <value>Soukey采摘任务</value>
  </data>
  <data name="RunTaskType2" xml:space="preserve">
    <value>数据库任务</value>
  </data>
  <data name="RunTaskType3" xml:space="preserve">
    <value>其它任务</value>
  </data>
  <data name="TaskRunType1" xml:space="preserve">
    <value>仅采集数据</value>
  </data>
  <data name="TaskRunType2" xml:space="preserve">
    <value>采集并发布数据</value>
  </data>
  <data name="TaskType1" xml:space="preserve">
    <value>根据网址采集网页数据</value>
  </data>
  <data name="TaskType2" xml:space="preserve">
    <value>采集整站网页数据</value>
  </data>
  <data name="TaskType3" xml:space="preserve">
    <value>采集RSS聚合数据</value>
  </data>
  <data name="TaskType4" xml:space="preserve">
    <value>采集ajax网页数据</value>
  </data>
  <data name="WebCode1" xml:space="preserve">
    <value>不编码</value>
  </data>
  <data name="WebCode2" xml:space="preserve">
    <value>自动</value>
  </data>
  <data name="WebCode3" xml:space="preserve">
    <value>gb2312</value>
  </data>
  <data name="WebCode4" xml:space="preserve">
    <value>UTF-8</value>
  </data>
  <data name="WebCode5" xml:space="preserve">
    <value>gbk</value>
  </data>
  <data name="WebCode6" xml:space="preserve">
    <value>big5</value>
  </data>
</root>