/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
#include "KConfig.h"
#include <iostream>
#include <fstream>
#include <assert.h>
#include "malloc_debug.h"


long file_size(FILE *fp)
{
	long begin,end,current;
	assert(fp);
	if(fp==NULL)
		return -1;
	current=ftell(fp);
	fseek(fp,0,SEEK_SET);
	begin=ftell(fp);
	fseek(fp,0,SEEK_END);
	end=ftell(fp);
	fseek(fp,current,SEEK_SET);
	return end-begin;
	
}

unsigned char KConfig::szDefaultKingateConf[] = {
	0x23, 0x74, 0x68, 0x65, 0x20, 0x6B, 0x69, 0x6E, 0x67, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6F, 0x6E,
0x66, 0x69, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x73, 0x65, 0x72,
0x76, 0x69, 0x63, 0x65, 0x0D, 0x0A, 0x23, 0x69, 0x66, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x64, 0x6F,
0x6E, 0x27, 0x74, 0x20, 0x77, 0x61, 0x6E, 0x74, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x20, 0x6F, 0x6E,
0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x2C, 0x70, 0x6C, 0x65, 0x61, 0x73,
0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x74, 0x20, 0x6F, 0x66, 0x66, 0x0D, 0x0A, 0x0D, 0x0A,
0x0D, 0x0A, 0x68, 0x74, 0x74, 0x70, 0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x66, 0x74, 0x70,
0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x70, 0x6F, 0x70, 0x33, 0x09, 0x09, 0x09, 0x6F, 0x6E,
0x0D, 0x0A, 0x73, 0x6D, 0x74, 0x70, 0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x74, 0x65, 0x6C,
0x6E, 0x65, 0x74, 0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x73, 0x6F, 0x63, 0x6B, 0x73, 0x09,
0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x6D, 0x6D, 0x73, 0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A,
0x72, 0x74, 0x73, 0x70, 0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x6D, 0x61, 0x6E, 0x61, 0x67,
0x65, 0x09, 0x09, 0x09, 0x6F, 0x6E, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x62, 0x69, 0x6E, 0x64, 0x5F,
0x61, 0x64, 0x64, 0x72, 0x09, 0x09, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 0x38, 0x2E, 0x30, 0x2E,
0x31, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x72, 0x75, 0x6E, 0x5F, 0x75, 0x73, 0x65, 0x72, 0x09, 0x09,
0x6E, 0x6F, 0x62, 0x6F, 0x64, 0x79, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x61, 0x78, 0x09,
0x09, 0x09, 0x35, 0x30, 0x30, 0x09, 0x09, 0x0D, 0x0A, 0x23, 0x6D, 0x61, 0x78, 0x20, 0x74, 0x68,
0x72, 0x65, 0x61, 0x64, 0x20, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D,
0x61, 0x78, 0x5F, 0x70, 0x65, 0x72, 0x5F, 0x69, 0x70, 0x09, 0x09, 0x30, 0x0D, 0x0A, 0x23, 0x74,
0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6C, 0x69, 0x6D,
0x69, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x69, 0x70, 0x20,
0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2E, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
0x61, 0x6C, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x30, 0x20, 0x2C, 0x6D, 0x65, 0x61, 0x6E, 0x20,
0x6E, 0x6F, 0x20, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x69, 0x6E,
0x5F, 0x66, 0x72, 0x65, 0x65, 0x5F, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x09, 0x09, 0x33, 0x0D,
0x0A, 0x23, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x69, 0x6E, 0x5F, 0x66, 0x72, 0x65, 0x65, 0x5F, 0x74,
0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61, 0x64, 0x64, 0x20,
0x69, 0x6E, 0x20, 0x76, 0x31, 0x2E, 0x35, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x5B,
0x68, 0x74, 0x74, 0x70, 0x5D, 0x0D, 0x0A, 0x68, 0x74, 0x74, 0x70, 0x5F, 0x70, 0x6F, 0x72, 0x74,
0x09, 0x09, 0x38, 0x30, 0x38, 0x32, 0x0D, 0x0A, 0x23, 0x68, 0x74, 0x74, 0x70, 0x20, 0x6C, 0x69,
0x73, 0x74, 0x65, 0x6E, 0x20, 0x70, 0x6F, 0x72, 0x74, 0x0D, 0x0A, 0x0D, 0x0A, 0x68, 0x74, 0x74,
0x70, 0x5F, 0x61, 0x63, 0x63, 0x65, 0x6C, 0x65, 0x72, 0x61, 0x74, 0x65, 0x09, 0x09, 0x6F, 0x66,
0x66, 0x0D, 0x0A, 0x23, 0x62, 0x65, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20,
0x64, 0x6F, 0x6E, 0x27, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x5F, 0x61,
0x63, 0x63, 0x65, 0x6C, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x6F, 0x6E, 0x20,
0x77, 0x68, 0x65, 0x6E, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6B, 0x69, 0x6E,
0x67, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x78, 0x79, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20,
0x70, 0x72, 0x6F, 0x74, 0x6F, 0x63, 0x6F, 0x6C, 0x0D, 0x0A, 0x23, 0x79, 0x6F, 0x75, 0x20, 0x6D,
0x75, 0x73, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x74, 0x20, 0x6F, 0x6E, 0x20, 0x77, 0x68,
0x65, 0x6E, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6B, 0x69, 0x6E, 0x67, 0x61,
0x74, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6C, 0x65, 0x72, 0x61, 0x74, 0x65,
0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
0x0D, 0x0A, 0x23, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x75, 0x73, 0x65, 0x20,
0x6B, 0x69, 0x6E, 0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x63, 0x63, 0x65, 0x6C,
0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x73,
0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x61, 0x64, 0x64,
0x0D, 0x0A, 0x23, 0x68, 0x74, 0x74, 0x70, 0x5F, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
0x09, 0x09, 0x7B, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x5F, 0x68, 0x6F,
0x73, 0x74, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x5F, 0x70, 0x6F, 0x72, 0x74, 0x20, 0x20, 0x6E, 0x6F,
0x6E, 0x65, 0x20, 0x7D, 0x0D, 0x0A, 0x0D, 0x0A, 0x78, 0x5F, 0x66, 0x6F, 0x72, 0x77, 0x61, 0x72,
0x64, 0x65, 0x64, 0x5F, 0x66, 0x6F, 0x72, 0x09, 0x09, 0x6F, 0x66, 0x66, 0x0D, 0x0A, 0x23, 0x61,
0x64, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x69, 0x70,
0x28, 0x77, 0x68, 0x6F, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6B, 0x69, 0x6E, 0x67, 0x61, 0x74, 0x65,
0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x70, 0x72, 0x6F, 0x78, 0x79, 0x29, 0x20, 0x69, 0x6E, 0x20,
0x74, 0x68, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
0x20, 0x68, 0x65, 0x61, 0x64, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x68, 0x74, 0x74, 0x70, 0x5F,
0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x23,
0x74, 0x69, 0x6D, 0x65, 0x20, 0x6F, 0x75, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x68, 0x74, 0x74, 0x70,
0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2E, 0x28, 0x73, 0x65, 0x63, 0x29, 0x0D, 0x0A,
0x0D, 0x0A, 0x23, 0x75, 0x73, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x72, 0x65, 0x64, 0x69,
0x72, 0x65, 0x63, 0x74, 0x20, 0x2C, 0x66, 0x6F, 0x72, 0x20, 0x73, 0x65, 0x63, 0x6F, 0x6E, 0x64,
0x20, 0x70, 0x72, 0x6F, 0x78, 0x79, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x68, 0x74, 0x74, 0x70,
0x5F, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x09, 0x09, 0x7B, 0x20, 0x64, 0x73, 0x74,
0x5B, 0x2F, 0x64, 0x73, 0x74, 0x5F, 0x6D, 0x61, 0x73, 0x6B, 0x5D, 0x5B, 0x3A, 0x64, 0x73, 0x74,
0x5F, 0x70, 0x6F, 0x72, 0x74, 0x5D, 0x09, 0x66, 0x69, 0x6C, 0x65, 0x09, 0x72, 0x65, 0x64, 0x69,
0x72, 0x65, 0x63, 0x74, 0x5F, 0x68, 0x6F, 0x73, 0x74, 0x3A, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
0x63, 0x74, 0x5F, 0x70, 0x6F, 0x72, 0x74, 0x09, 0x66, 0x6C, 0x61, 0x67, 0x09, 0x7D, 0x0D, 0x0A,
0x23, 0x68, 0x74, 0x74, 0x70, 0x5F, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x09, 0x09,
0x7B, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x20, 0x32, 0x31, 0x30, 0x2E, 0x31, 0x35, 0x2E, 0x32, 0x39,
0x2E, 0x31, 0x36, 0x3A, 0x38, 0x30, 0x20, 0x6E, 0x6F, 0x6E, 0x65, 0x20, 0x7D, 0x0D, 0x0A, 0x23,
0x68, 0x74, 0x74, 0x70, 0x5F, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x09, 0x09, 0x7B,
0x20, 0x32, 0x31, 0x31, 0x2E, 0x20, 0x2A, 0x20, 0x20, 0x32, 0x31, 0x30, 0x2E, 0x31, 0x35, 0x2E,
0x32, 0x39, 0x2E, 0x31, 0x36, 0x3A, 0x38, 0x30, 0x38, 0x32, 0x20, 0x70, 0x72, 0x6F, 0x78, 0x79,
0x20, 0x7D, 0x0D, 0x0A, 0x23, 0x5B, 0x66, 0x74, 0x70, 0x5D, 0x0D, 0x0A, 0x66, 0x74, 0x70, 0x5F,
0x70, 0x6F, 0x72, 0x74, 0x09, 0x09, 0x32, 0x31, 0x32, 0x31, 0x0D, 0x0A, 0x66, 0x74, 0x70, 0x5F,
0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x0D,
0x0A, 0x23, 0x5B, 0x70, 0x6F, 0x70, 0x33, 0x5D, 0x0D, 0x0A, 0x70, 0x6F, 0x70, 0x33, 0x5F, 0x70,
0x6F, 0x72, 0x74, 0x09, 0x09, 0x31, 0x31, 0x30, 0x30, 0x0D, 0x0A, 0x70, 0x6F, 0x70, 0x33, 0x5F,
0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x0D,
0x0A, 0x23, 0x5B, 0x73, 0x6D, 0x74, 0x70, 0x5D, 0x0D, 0x0A, 0x73, 0x6D, 0x74, 0x70, 0x5F, 0x70,
0x6F, 0x72, 0x74, 0x09, 0x09, 0x32, 0x35, 0x32, 0x35, 0x0D, 0x0A, 0x73, 0x6D, 0x74, 0x70, 0x5F,
0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x09, 0x0D, 0x0A,
0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x5B, 0x74, 0x65, 0x6C, 0x6E, 0x65, 0x74, 0x5D, 0x0D, 0x0A, 0x74,
0x65, 0x6C, 0x6E, 0x65, 0x74, 0x5F, 0x70, 0x6F, 0x72, 0x74, 0x09, 0x09, 0x32, 0x33, 0x32, 0x33,
0x0D, 0x0A, 0x74, 0x65, 0x6C, 0x6E, 0x65, 0x74, 0x5F, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75,
0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x5B, 0x73, 0x6F, 0x63, 0x6B,
0x73, 0x5D, 0x0D, 0x0A, 0x73, 0x6F, 0x63, 0x6B, 0x73, 0x5F, 0x70, 0x6F, 0x72, 0x74, 0x09, 0x09,
0x31, 0x30, 0x38, 0x32, 0x0D, 0x0A, 0x73, 0x6F, 0x63, 0x6B, 0x73, 0x5F, 0x74, 0x69, 0x6D, 0x65,
0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x73, 0x6F, 0x63, 0x6B, 0x73,
0x35, 0x5F, 0x75, 0x73, 0x65, 0x72, 0x09, 0x09, 0x6F, 0x66, 0x66, 0x0D, 0x0A, 0x0D, 0x0A, 0x23,
0x5B, 0x6D, 0x6D, 0x73, 0x5D, 0x0D, 0x0A, 0x6D, 0x6D, 0x73, 0x5F, 0x70, 0x6F, 0x72, 0x74, 0x09,
0x09, 0x31, 0x37, 0x35, 0x35, 0x0D, 0x0A, 0x6D, 0x6D, 0x73, 0x5F, 0x74, 0x69, 0x6D, 0x65, 0x5F,
0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x5B, 0x72, 0x74,
0x73, 0x70, 0x5D, 0x0D, 0x0A, 0x72, 0x74, 0x73, 0x70, 0x5F, 0x70, 0x6F, 0x72, 0x74, 0x09, 0x09,
0x35, 0x35, 0x34, 0x30, 0x0D, 0x0A, 0x72, 0x74, 0x73, 0x70, 0x5F, 0x74, 0x69, 0x6D, 0x65, 0x5F,
0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0x5B, 0x6D, 0x61,
0x6E, 0x61, 0x67, 0x65, 0x5D, 0x0D, 0x0A, 0x6D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x5F, 0x70, 0x6F,
0x72, 0x74, 0x09, 0x09, 0x32, 0x32, 0x32, 0x32, 0x0D, 0x0A, 0x6D, 0x61, 0x6E, 0x61, 0x67, 0x65,
0x5F, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x33, 0x30, 0x30, 0x0D, 0x0A,
0x0D, 0x0A, 0x23, 0x6C, 0x6F, 0x67, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x0D, 0x0A,
0x6C, 0x6F, 0x67, 0x5F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x09, 0x09, 0x75, 0x73, 0x65, 0x72, 0x0D,
0x0A, 0x6C, 0x6F, 0x67, 0x5F, 0x6C, 0x65, 0x76, 0x65, 0x6C, 0x09, 0x09, 0x32, 0x09, 0x09, 0x09,
0x0D, 0x0A, 0x6C, 0x6F, 0x67, 0x5F, 0x72, 0x6F, 0x74, 0x61, 0x74, 0x65, 0x09, 0x09, 0x7B, 0x20,
0x30, 0x20, 0x30, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x7D, 0x09, 0x09, 0x0D, 0x0A, 0x6C,
0x6F, 0x67, 0x5F, 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x5F, 0x6D, 0x73, 0x67, 0x09, 0x09, 0x6F, 0x66,
0x66, 0x0D, 0x0A, 0x23, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x6F, 0x67, 0x5F, 0x63, 0x6C, 0x6F, 0x73,
0x65, 0x5F, 0x6D, 0x73, 0x67, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61, 0x64, 0x64, 0x20,
0x69, 0x6E, 0x20, 0x76, 0x31, 0x2E, 0x35, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x69, 0x74, 0x20,
0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6B, 0x69, 0x6E, 0x67, 0x61, 0x74, 0x65, 0x20, 0x77,
0x69, 0x6C, 0x6C, 0x20, 0x6C, 0x6F, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x6E,
0x65, 0x63, 0x74, 0x20, 0x63, 0x6C, 0x6F, 0x73, 0x65, 0x20, 0x6D, 0x73, 0x67, 0x20, 0x74, 0x6F,
0x20, 0x6C, 0x6F, 0x67, 0x5F, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0D, 0x0A, 0x23, 0x61, 0x6E, 0x64,
0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x69, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6F, 0x66, 0x66,
0x20, 0x6B, 0x69, 0x6E, 0x67, 0x61, 0x74, 0x65, 0x20, 0x77, 0x6F, 0x6E, 0x27, 0x74, 0x20, 0x6C,
0x6F, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x20, 0x63,
0x6C, 0x6F, 0x73, 0x65, 0x20, 0x6D, 0x73, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x6C, 0x6F, 0x67, 0x5F,
0x66, 0x69, 0x6C, 0x65, 0x0D, 0x0A, 0x0D, 0x0A, 0x23, 0xBB, 0xBA, 0xB4, 0xE6, 0xB2, 0xBF, 0xB7,
0xD6, 0x0D, 0x0A, 0x23, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6F,
0x6E, 0x0D, 0x0A, 0x0D, 0x0A, 0x6D, 0x65, 0x6D, 0x5F, 0x6D, 0x69, 0x6E, 0x5F, 0x63, 0x61, 0x63,
0x68, 0x65, 0x09, 0x09, 0x31, 0x30, 0x6D, 0x0D, 0x0A, 0x6D, 0x65, 0x6D, 0x5F, 0x6D, 0x61, 0x78,
0x5F, 0x63, 0x61, 0x63, 0x68, 0x65, 0x09, 0x09, 0x31, 0x32, 0x6D, 0x0D, 0x0A, 0x64, 0x69, 0x73,
0x6B, 0x5F, 0x6D, 0x69, 0x6E, 0x5F, 0x63, 0x61, 0x63, 0x68, 0x65, 0x09, 0x09, 0x32, 0x30, 0x6D,
0x0D, 0x0A, 0x64, 0x69, 0x73, 0x6B, 0x5F, 0x6D, 0x61, 0x78, 0x5F, 0x63, 0x61, 0x63, 0x68, 0x65,
0x09, 0x09, 0x33, 0x30, 0x6D, 0x0D, 0x0A, 0x75, 0x73, 0x65, 0x5F, 0x64, 0x69, 0x73, 0x6B, 0x5F,
0x63, 0x61, 0x63, 0x68, 0x65, 0x09, 0x09, 0x6F, 0x66, 0x66, 0x0D, 0x0A, 0x72, 0x65, 0x66, 0x72,
0x65, 0x73, 0x68, 0x09, 0x09, 0x09, 0x6E, 0x65, 0x76, 0x65, 0x72, 0x0D, 0x0A, 0x72, 0x65, 0x66,
0x72, 0x65, 0x73, 0x68, 0x5F, 0x74, 0x69, 0x6D, 0x65, 0x09, 0x09, 0x30, 0x0D, 0x0A, 0x0D, 0x0A,
0x0D, 0x0A, 0x23, 0xB6, 0xCB, 0xBF, 0xDA, 0xD6, 0xD8, 0xB6, 0xA8, 0xCF, 0xF2, 0x0D, 0x0A, 0x23,
0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x09, 0x09, 0x70, 0x6F, 0x72, 0x74, 0x5F, 0x68,
0x6F, 0x73, 0x74, 0x3A, 0x70, 0x6F, 0x72, 0x74, 0x09, 0x09, 0x23, 0xB6, 0xCB, 0xBF, 0xDA, 0xD6,
0xD8, 0xB6, 0xA8, 0xCF, 0xF2, 0xB9, 0xA6, 0xC4, 0xDC, 0xA3, 0xAC, 0xCB, 0xF9, 0xD3, 0xD0, 0x70,
0x6F, 0x72, 0x74, 0xB6, 0xCB, 0xBF, 0xDA, 0xB5, 0xC4, 0xC7, 0xEB, 0xC7, 0xF3, 0xB7, 0xA2, 0xCB,
0xCD, 0xD6, 0xC1, 0x68, 0x6F, 0x73, 0x74, 0x3A, 0x70, 0x6F, 0x72, 0x74, 0x0D, 0x0A, 0x23, 0x72,
0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x09, 0x09, 0x39, 0x39, 0x39, 0x39, 0x5F, 0x32, 0x31,
0x31, 0x2E, 0x31, 0x34, 0x31, 0x2E, 0x39, 0x30, 0x2E, 0x32, 0x30, 0x31, 0x3A, 0x32, 0x33, 0x0D,
0x0A, 0x23, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x09, 0x09, 0x33, 0x33, 0x33, 0x33,
0x5F, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x3A, 0x32, 0x33, 0x0D, 0x0A, 0x0D,
0x0A, 0x23, 0x5B, 0x75, 0x73, 0x65, 0x72, 0x5D, 0x0D, 0x0A, 0x75, 0x73, 0x65, 0x72, 0x5F, 0x74,
0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x75, 0x74, 0x09, 0x09, 0x30, 0x0D, 0x0A, 0x23, 0x73, 0x65, 0x74,
0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6C, 0x6F, 0x67, 0x69, 0x6E, 0x20,
0x74, 0x69, 0x6D, 0x65, 0x20, 0x6F, 0x75, 0x74, 0x0D, 0x0A
};

unsigned char KConfig::szDefaultAccessConf[] = {
0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x64, 0x65, 0x6E, 0x79, 0x0D, 0x0A, 0x6D, 0x6F, 0x64, 0x65,
0x6C, 0x20, 0x64, 0x65, 0x6E, 0x79, 0x0D, 0x0A, 0x7B, 0x20, 0x6D, 0x61, 0x6E, 0x61, 0x67, 0x65,
0x20, 0x2A, 0x20, 0x21, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x20, 0x2A, 0x20,
0x7D, 0x20, 0x0D, 0x0A, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x20, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x0D,
0x0A, 0x7B, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x2A, 0x20, 0x7D, 0x0D, 0x0A
};
KConfig::KConfig()
{
	//memset(config_name,0,sizeof(config_name));
}

KConfig::~KConfig()
{

}

int KConfig::open(const char * m_file)
{
	int i;
	char *str;
	FILE *fp;
	if((fp=fopen(m_file,"r"))==NULL){
	//	fprintf(stderr,"cann't open config file,filename is:%s\n",m_file);

		return 0;
	}
	long len=file_size(fp)+1;
	str=(char *)malloc(len);
	if(str==NULL){
	//	fprintf(stderr,"cann't alloc mem in open function\n");
		return 0;
	}

	memset(str,0,len);
	i=fread(str,1,len-1,fp);
	fclose(fp);
	str[i]=0;
	h_item_num=split_config_file(str);
	free(str);
	return 1;
}
int KConfig::create(const char *str)
{
//	config_name[0][0]=0;
	h_item_num=split_config_file(str);
	return 1;
}
int KConfig::skip_next_line(const char *str)
{
	int size=strlen(str);
	int i;
	for(i=0;i<size-1;i++){
		if(str[i]=='\n')
			return i+1;
	}
	return 0;
}
int KConfig::get_word(const char *str,char *word,bool &multi)
{	
	int i,p,size=strlen(str);
	//printf("str=%s.\n",str);
	multi=false;
	for(i=0;i<size;i++){
		if( (str[i]=='#') || (str[i]=='\n') || (str[i]=='\r')  )
			return 0;
		if(str[i]=='{'){
			multi=true;
			continue;
		}
		if((str[i]!=32)&&(str[i]!='\t'))
			break;
	

	}	
	p=i;
	if(!multi){
		for(i=p+1;i<size;i++){
			if((str[i]==32)||(str[i]=='\n')||(str[i]=='\t')||(str[i]=='\r'))
				break;
		}
	}else{
		for(i=p+1;i<size;i++)
			if(str[i]=='}')
				break;
	}
	int len=((MAX_WIDTH>(i-p))?i-p:MAX_WIDTH );

	if(len<=0)
		return 0;
	//printf("len=%d ",len);
	memcpy(word,str+p,len);
	word[len]='\0';
//	printf("word=%s.i=%d,p=%d\n",word,i,p);
	return i+1;
}
int KConfig::match_name(const char *str,char *name,char *value)
{
	int point;
//	printf("str=%s\n",str);
	if((point=get_word(str,name,name_multi))<=0)
		return point;
	point=get_word(str+point,value,value_multi);
	//printf("value=%s\n",value);
	//	return 1;
	return 1;

}

int KConfig::split_config_file(const char *str)
{
	int i=0,point=0;
	int tmp;
	ITEM_T t_item;
	char name[MAX_WIDTH+1];
	char value[MAX_WIDTH+1];
	//printf("str=%s\n",str);
	while(1){
		name[0]=0;
		value[0]=0;
		if(match_name(str+point,name,value)>0){
			t_item.name_multi=name_multi;
			t_item.value_multi=value_multi;
			t_item.name=name;
			t_item.value=value;
//			t_item.skip=false;
			item.push_back(t_item);
		}		
		if((tmp=skip_next_line(str+point))<=0)
			break;
		point+=tmp;
	//	printf("i=%d,point=%d\n",i,point);
	}
	return i;
	
}
const char *KConfig::GetValue(const char *name,int index)
{
	int i;
	int len=item.size();
	int p=0;
	for(i=0;i<len;i++){
		if( (strcmp(item[i].name.c_str(),name)==0) ){
			if(index==p++)
				return item[i].value.c_str();
		}
	}
	return "";
}
void KConfig::print_all_item()
{
	int len=item.size();
	for(int i=0;i<len;i++)
		printf("%s=%s\n",item[i].name.c_str(),item[i].value.c_str());

}
int KConfig::GetName(const char *name,int index)
{
	int i;
	int len=item.size();
	int p=0;
	for(i=0;i<len;i++){
		if( (strcmp(item[i].name.c_str(),name)==0) ){
			if(index==p++)
				return i;
		}
	}
	return -1;
}
const char *KConfig::GetName(int index)
{
	if(index<0 || index>=item.size())
		return "";
	return item[index].name.c_str();
}
const char *KConfig::GetValue(int index)
{
	if(index<0 || index>=item.size())
		return "";
	return item[index].value.c_str();
}
int KConfig::getSize()
{
	return item.size();
}
bool KConfig::SaveFile(const char *filename)
{
	FILE *fp=fopen(filename,"wt");
	if(fp==NULL){
		return false;
	}
	for(int i=0;i<item.size();i++){
		if(item[i].name_multi){
			fwrite("{",1,1,fp);
		}
		fwrite(item[i].name.c_str(),1,item[i].name.size(),fp);
		if(item[i].name_multi){
			fwrite("}",1,1,fp);
		}
		fwrite(" ",1,1,fp);
		if(item[i].value_multi){
			fwrite("{",1,1,fp);
		}
		fwrite(item[i].value.c_str(),1,item[i].value.size(),fp);
		if(item[i].value_multi){
			fwrite("}",1,1,fp);
		}
		fwrite("\r\n",1,2,fp);
	}
	fclose(fp);
	return true;
}
bool KConfig::AddValue(const char *name,const char *value,bool name_multi,bool value_multi,bool sort)
{
	ITEM_T tmp_item;
	tmp_item.name_multi=name_multi;
	tmp_item.value_multi=value_multi;
	tmp_item.name=name;
	tmp_item.value=value;
//	tmp_item.skip=false;
	
	if(!sort){
	
		item.push_back(tmp_item);

	}else{
	
		int i=GetName(name);
	
		if(i<0){
		
			item.push_back(tmp_item);

		}else{

			item.insert(item.begin()+i,tmp_item);

		}
	}
	return true;

}
bool KConfig::SetValue(const char *name,const char *value,int index,bool value_multi)
{
	int p=GetName(name,index);
	if(p<0){
		return AddValue(name,value,false,value_multi);
	}
	item[p].value=value;
	item[p].value_multi=value_multi;
	return true;
}
bool KConfig::SetValue(int index,const char *value)
{
	if(index<0 || index>=item.size())
		return false;
	item[index].value=value;
	//item[index].value_multi=true;
	return true;
}
bool KConfig::delItem(int index)
{	
	if(index<0 || index>=item.size())
		return false;
	item.erase(item.begin()+index);
	return true;
}
bool KConfig::DelName(const char *name,int index)
{
	int p=GetName(name,index);
	if(p<0)
		return false;
	return delItem(p);
}
